'''
The parameter for running this file are: board1.txt board2.txt depth
the first parameter is the input file
the second parameter is the output file generated by the program
the third parameter is the depth
'''
import sys


def closeMill(i: int, b: list):
    c = b[i]
    if c == 'W' or c == 'B':
        if i == 0:
            if (b[2] == c and b[4] == c) or (b[6] == c and b[18] == c):
                return True
            else:
                return False
        if i == 1:
            if (b[3] == c and b[5] == c) or (b[11] == c and b[20] == c):
                return True
            else:
                return False
        if i == 2:
            if (b[0] == c and b[4] == c) or (b[7] == c and b[15] == c):
                return True
            else:
                return False
        if i == 3:
            if (b[1] == c and b[5] == c) or (b[10] == c and b[17] == c):
                return True
            else:
                return False
        if i == 4:
            if (b[2] == c and b[0] == c) or (b[8] == c and b[12] == c):
                return True
            else:
                return False
        if i == 5:
            if (b[1] == c and b[3] == c) or (b[9] == c and b[14] == c):
                return True
            else:
                return False
        if i == 6:
            if (b[7] == c and b[8] == c) or (b[18] == c and b[0] == c):
                return True
            else:
                return False
        if i == 7:
            if (b[6] == c and b[8] == c) or (b[2] == c and b[15] == c):
                return True
            else:
                return False
        if i == 8:
            if (b[6] == c and b[7] == c) or (b[4] == c and b[12] == c):
                return True
            else:
                return False
        if i == 9:
            if (b[10] == c and b[11] == c) or (b[5] == c and b[14] == c):
                return True
            else:
                return False
        if i == 10:
            if (b[9] == c and b[11] == c) or (b[3] == c and b[17] == c):
                return True
            else:
                return False
        if i == 11:
            if (b[9] == c and b[10] == c) or (b[1] == c and b[20] == c):
                return True
            else:
                return False
        if i == 12:
            if (b[13] == c and b[14] == c) or (b[4] == c and b[8] == c):
                return True
            else:
                return False
        if i == 13:
            if (b[12] == c and b[14] == c) or (b[16] == c and b[19] == c):
                return True
            else:
                return False
        if i == 14:
            if (b[12] == c and b[13] == c) or (b[17] == c and b[20] == c):
                return True
            else:
                return False
        if i == 15:
            if (b[16] == c and b[17] == c) or (b[12] == c and b[18] == c):
                return True
            else:
                return False
        if i == 16:
            if (b[15] == c and b[17] == c) or (b[13] == c and b[19] == c):
                return True
            else:
                return False
        if i == 17:
            if (b[15] == c and b[16] == c) or (b[14] == c and b[20] == c):
                return True
            else:
                return False
        if i == 18:
            if (b[19] == c and b[20] == c) or (b[12] == c and b[15] == c):
                return True
            else:
                return False
        if i == 19:
            if (b[18] == c and b[20] == c) or (b[16] == c and b[13] == c):
                return True
            else:
                return False
        if i == 20:
            if (b[14] == c and b[17] == c) or (b[11] == c and b[1] == c):
                return True
            else:
                return False


def generateRemove(b, l):
    copyL = l.copy()
    for i in range(len(b)):
        if b[i] == 'B':
            if not closeMill(i, b):
                copyB =  list(b)
                copyB[i] = 'x'
                copyL.append(''.join(copyB))
            else:
                copyL.append(b)
    return copyL


def generateAdd(input: list):
    l = []
    b = []
    for i in range(len(input)):
        if input[i] == 'x':
            b = list(input)
            b[i] = "W"
            if closeMill(i, b):
                l = generateRemove(''.join(b), l)
            else:
                l.append(''.join(b))
    return l


def StaticEstimation(input):
    black = 0
    white = 0
    for i in input:
        if i == 'W':
            white += 1
        elif i == 'B':
            black += 1
    return white - black


def MaxMin(input, depth):
    global estimate
    global position_evaluated
    if depth == 0:
        position_evaluated += 1

    elif depth > 0:
        depth -= 1
        x = -999999
        l = generateAdd(input)
        for i in l:
            minBoard = MinMax(i, depth)
            if x < StaticEstimation(minBoard):
                x = StaticEstimation(minBoard)
                estimate = x
                maxC = i
        return maxC
    return input


def MinMax(input, depth):
    global position_evaluated
    global estimate
    if depth == 0:
        position_evaluated += 1
    elif depth > 0:
        depth -= 1
        posX = 999999
        l = generateAdd(input)
        for i in l:
            maxBoard = MaxMin(i, depth)
            if posX > StaticEstimation(maxBoard):
                posX = StaticEstimation(maxBoard)
                minC = i
        return minC
    return input

def swapped(input):
    cBoard = list(input)
    for i in range(len(cBoard)):
        if cBoard[i] == 'W':
            cBoard[i] = 'B'
        elif cBoard[i] == 'B':
            cBoard[i] = 'W'

    return cBoard


def main():
    global position_evaluated
    global estimate

    position_evaluated = 0
    estimate = 0
    iFile = sys.argv[1]
    oFile = sys.argv[2]
    depth = int(sys.argv[3])


    with open(iFile, 'r') as f:
        input = f.read()
        char = list(input)

    bresult = swapped(input)

    result = MaxMin(bresult, depth)
    wresult = swapped(result)
    print("Board Position:",wresult)
    print("Positions Evaluated:", position_evaluated)
    print("static estimation:", estimate)
    with open(oFile, 'w') as f:
        f.write(str(wresult))

if __name__ == '__main__':
    main()
